// <auto-generated />
using System;
using Haver.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Haver.Data.HMigrations
{
    [DbContext(typeof(HaverContext))]
    [Migration("20240312232535_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.15");

            modelBuilder.Entity("Haver.Models.Employee", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<int>("FirstAid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Prescriber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Haver.Models.EngReview", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Review")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("EngReviews");
                });

            modelBuilder.Entity("Haver.Models.Engineering", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustIssueMsg")
                        .HasMaxLength(3000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Disposition")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("DrawReqUpdating")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EngReviewID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EngineerSign")
                        .IsRequired()
                        .HasMaxLength(55)
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("EngineeringDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCustNotificationNecessary")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OrgRevisionNum")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("RevisionDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("RevisionedBy")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpdatedRevisionNum")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("EngReviewID");

                    b.ToTable("Engineerings");
                });

            modelBuilder.Entity("Haver.Models.NCR", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<int?>("EngineeringID")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsEngineerRequired")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsNCRArchived")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsNCRDraft")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NCRNum")
                        .HasColumnType("TEXT");

                    b.Property<int?>("NewNCRID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Phase")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PrevNCRID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ProcurementID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PurchasingID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("QualityRepresentativeID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ReinspectionID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<string>("VoidingReason")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("EngineeringID");

                    b.HasIndex("ProcurementID");

                    b.HasIndex("PurchasingID");

                    b.HasIndex("QualityRepresentativeID");

                    b.HasIndex("ReinspectionID");

                    b.ToTable("NCRs");
                });

            modelBuilder.Entity("Haver.Models.NCRNumber", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Counter")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.ToTable("NCRNumbers");
                });

            modelBuilder.Entity("Haver.Models.Part", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("PartDesc")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PartNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SupplierID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("SupplierID");

                    b.ToTable("Parts");
                });

            modelBuilder.Entity("Haver.Models.PrelDecision", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Decision")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("PrelDecisions");
                });

            modelBuilder.Entity("Haver.Models.Problem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProblemDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Problems");
                });

            modelBuilder.Entity("Haver.Models.ProcessApplicable", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProcessName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("ProcessesApplicable");
                });

            modelBuilder.Entity("Haver.Models.Procurement", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CarrierInfo")
                        .HasMaxLength(3000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("ChargeSupplier")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ExpecDateOfReturn")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCreditExpec")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("ProcurementDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProcurementSign")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("RMANo")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SuppItemsBack")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SuppReturnCompleted")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.ToTable("Procurement");
                });

            modelBuilder.Entity("Haver.Models.Purchasing", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CarNum")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CarRaised")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ExpecDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("FollowUpType")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsFollowUpReq")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .HasMaxLength(3000)
                        .HasColumnType("TEXT");

                    b.Property<string>("OpManagerSign")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("PrelDecisionID")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("PurchasingDate")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("PrelDecisionID");

                    b.ToTable("Purchasings");
                });

            modelBuilder.Entity("Haver.Models.QualityPhoto", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Content")
                        .HasColumnType("BLOB");

                    b.Property<int?>("EngineeringID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MimeType")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ProcurementID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PurchasingID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("QualityRepresentativeID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ReinspectionID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("EngineeringID");

                    b.HasIndex("ProcurementID");

                    b.HasIndex("PurchasingID");

                    b.HasIndex("QualityRepresentativeID");

                    b.HasIndex("ReinspectionID");

                    b.ToTable("QualityPhotos");
                });

            modelBuilder.Entity("Haver.Models.QualityRepresentative", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ConfirmingEng")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DescDefect")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("TEXT");

                    b.Property<bool>("NonConforming")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PartID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PoNo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProblemID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProcessApplicableID")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("QualityRepDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("QualityRepresentativeSign")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("QuantDefective")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuantReceived")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SalesOrd")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("SupplierID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("PartID");

                    b.HasIndex("ProblemID");

                    b.HasIndex("ProcessApplicableID");

                    b.HasIndex("SupplierID");

                    b.ToTable("QualityRepresentatives");
                });

            modelBuilder.Entity("Haver.Models.Reinspection", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("NewNCRNum")
                        .HasColumnType("TEXT");

                    b.Property<bool>("ReinspecAccepted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReinspecInspectorSign")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("ReinspectionDate")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Reinspection");
                });

            modelBuilder.Entity("Haver.Models.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PushAuth")
                        .HasMaxLength(512)
                        .HasColumnType("TEXT");

                    b.Property<string>("PushEndpoint")
                        .HasMaxLength(512)
                        .HasColumnType("TEXT");

                    b.Property<string>("PushP256DH")
                        .HasMaxLength(512)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeID");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("Haver.Models.Supplier", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("SupplierCode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("Haver.Models.VideoLink", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EngineeringID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Link")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ProcurementID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PurchasingID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("QualityRepresentativeID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ReinspectionID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("EngineeringID");

                    b.HasIndex("ProcurementID");

                    b.HasIndex("PurchasingID");

                    b.HasIndex("QualityRepresentativeID");

                    b.HasIndex("ReinspectionID");

                    b.ToTable("VideoLinks");
                });

            modelBuilder.Entity("Haver.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Haver.Models.Engineering", b =>
                {
                    b.HasOne("Haver.Models.EngReview", "EngReview")
                        .WithMany("Engineerings")
                        .HasForeignKey("EngReviewID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EngReview");
                });

            modelBuilder.Entity("Haver.Models.NCR", b =>
                {
                    b.HasOne("Haver.Models.Engineering", "Engineering")
                        .WithMany()
                        .HasForeignKey("EngineeringID");

                    b.HasOne("Haver.Models.Procurement", "Procurement")
                        .WithMany()
                        .HasForeignKey("ProcurementID");

                    b.HasOne("Haver.Models.Purchasing", "Purchasing")
                        .WithMany()
                        .HasForeignKey("PurchasingID");

                    b.HasOne("Haver.Models.QualityRepresentative", "QualityRepresentative")
                        .WithMany()
                        .HasForeignKey("QualityRepresentativeID");

                    b.HasOne("Haver.Models.Reinspection", "Reinspection")
                        .WithMany()
                        .HasForeignKey("ReinspectionID");

                    b.Navigation("Engineering");

                    b.Navigation("Procurement");

                    b.Navigation("Purchasing");

                    b.Navigation("QualityRepresentative");

                    b.Navigation("Reinspection");
                });

            modelBuilder.Entity("Haver.Models.Part", b =>
                {
                    b.HasOne("Haver.Models.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierID");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Haver.Models.Purchasing", b =>
                {
                    b.HasOne("Haver.Models.PrelDecision", "PrelDecision")
                        .WithMany("Purchasings")
                        .HasForeignKey("PrelDecisionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrelDecision");
                });

            modelBuilder.Entity("Haver.Models.QualityPhoto", b =>
                {
                    b.HasOne("Haver.Models.Engineering", "Engineering")
                        .WithMany("QualityPhotos")
                        .HasForeignKey("EngineeringID");

                    b.HasOne("Haver.Models.Procurement", "Procurement")
                        .WithMany("QualityPhotos")
                        .HasForeignKey("ProcurementID");

                    b.HasOne("Haver.Models.Purchasing", "Purchasing")
                        .WithMany("QualityPhotos")
                        .HasForeignKey("PurchasingID");

                    b.HasOne("Haver.Models.QualityRepresentative", "QualityRepresentative")
                        .WithMany("QualityPhotos")
                        .HasForeignKey("QualityRepresentativeID");

                    b.HasOne("Haver.Models.Reinspection", "Reinspection")
                        .WithMany("QualityPhotos")
                        .HasForeignKey("ReinspectionID");

                    b.Navigation("Engineering");

                    b.Navigation("Procurement");

                    b.Navigation("Purchasing");

                    b.Navigation("QualityRepresentative");

                    b.Navigation("Reinspection");
                });

            modelBuilder.Entity("Haver.Models.QualityRepresentative", b =>
                {
                    b.HasOne("Haver.Models.Part", "Part")
                        .WithMany()
                        .HasForeignKey("PartID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Haver.Models.Problem", "Problem")
                        .WithMany("QualityRepresentatives")
                        .HasForeignKey("ProblemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Haver.Models.ProcessApplicable", "ProcessApplicable")
                        .WithMany("QualityRepresentatives")
                        .HasForeignKey("ProcessApplicableID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Haver.Models.Supplier", "Supplier")
                        .WithMany("QualityRepresentatives")
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Part");

                    b.Navigation("Problem");

                    b.Navigation("ProcessApplicable");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Haver.Models.Subscription", b =>
                {
                    b.HasOne("Haver.Models.Employee", "Employee")
                        .WithMany("Subscriptions")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Haver.Models.VideoLink", b =>
                {
                    b.HasOne("Haver.Models.Engineering", "Engineering")
                        .WithMany("VideoLinks")
                        .HasForeignKey("EngineeringID");

                    b.HasOne("Haver.Models.Procurement", "Procurement")
                        .WithMany("VideoLinks")
                        .HasForeignKey("ProcurementID");

                    b.HasOne("Haver.Models.Purchasing", "Purchasing")
                        .WithMany("VideoLinks")
                        .HasForeignKey("PurchasingID");

                    b.HasOne("Haver.Models.QualityRepresentative", "QualityRepresentative")
                        .WithMany("VideoLinks")
                        .HasForeignKey("QualityRepresentativeID");

                    b.HasOne("Haver.Models.Reinspection", "Reinspection")
                        .WithMany("VideoLinks")
                        .HasForeignKey("ReinspectionID");

                    b.Navigation("Engineering");

                    b.Navigation("Procurement");

                    b.Navigation("Purchasing");

                    b.Navigation("QualityRepresentative");

                    b.Navigation("Reinspection");
                });

            modelBuilder.Entity("Haver.Models.Employee", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("Haver.Models.EngReview", b =>
                {
                    b.Navigation("Engineerings");
                });

            modelBuilder.Entity("Haver.Models.Engineering", b =>
                {
                    b.Navigation("QualityPhotos");

                    b.Navigation("VideoLinks");
                });

            modelBuilder.Entity("Haver.Models.PrelDecision", b =>
                {
                    b.Navigation("Purchasings");
                });

            modelBuilder.Entity("Haver.Models.Problem", b =>
                {
                    b.Navigation("QualityRepresentatives");
                });

            modelBuilder.Entity("Haver.Models.ProcessApplicable", b =>
                {
                    b.Navigation("QualityRepresentatives");
                });

            modelBuilder.Entity("Haver.Models.Procurement", b =>
                {
                    b.Navigation("QualityPhotos");

                    b.Navigation("VideoLinks");
                });

            modelBuilder.Entity("Haver.Models.Purchasing", b =>
                {
                    b.Navigation("QualityPhotos");

                    b.Navigation("VideoLinks");
                });

            modelBuilder.Entity("Haver.Models.QualityRepresentative", b =>
                {
                    b.Navigation("QualityPhotos");

                    b.Navigation("VideoLinks");
                });

            modelBuilder.Entity("Haver.Models.Reinspection", b =>
                {
                    b.Navigation("QualityPhotos");

                    b.Navigation("VideoLinks");
                });

            modelBuilder.Entity("Haver.Models.Supplier", b =>
                {
                    b.Navigation("QualityRepresentatives");
                });
#pragma warning restore 612, 618
        }
    }
}
